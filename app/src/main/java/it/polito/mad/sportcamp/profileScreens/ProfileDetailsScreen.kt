package it.polito.mad.sportcamp.profileScreens

import android.content.Context
import android.content.pm.PackageManager
import android.graphics.ImageDecoder
import android.net.Uri
import android.os.Build
import android.provider.MediaStore
import android.util.Log
import android.widget.Toast
import androidx.activity.compose.ManagedActivityResultLauncher
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.activity.result.launch
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.AlertDialog
import androidx.compose.material.LinearProgressIndicator
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardCapitalization
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.lifecycle.viewmodel.initializer
import androidx.lifecycle.viewmodel.viewModelFactory
import androidx.navigation.NavHostController
import com.google.firebase.auth.FirebaseUser
import com.google.firebase.auth.ktx.auth
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase
import it.polito.mad.sportcamp.R
import it.polito.mad.sportcamp.bottomnav.Screen
import androidx.compose.material.Button
import androidx.compose.material.Checkbox
import androidx.compose.material.CheckboxDefaults
import androidx.compose.material.DropdownMenu
import androidx.compose.material.DropdownMenuItem
import androidx.compose.material.Icon
import androidx.compose.material.IconButton
import androidx.compose.material.MaterialTheme
import androidx.compose.material.OutlinedTextField
import androidx.compose.material.Surface
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowDropDown
import androidx.compose.material.icons.filled.ArrowDropUp
import androidx.compose.material.icons.filled.PhotoCamera
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.sp
import androidx.core.content.ContextCompat
import it.polito.mad.sportcamp.common.BitmapConverter


class ProfileDetailsViewModel : ViewModel() {

    private val db = Firebase.firestore
    private var fuser: FirebaseUser = Firebase.auth.currentUser!!

    var usrName by mutableStateOf("")
    var usrNickname by mutableStateOf("")
    var usrCity by mutableStateOf("")
    var usrAge by mutableStateOf("")
    var usrGender by mutableStateOf("")
    var usrImage by mutableStateOf("")
    var usrBio by mutableStateOf("Hey there! I'm using Sport Camp")
    var usrSports by mutableStateOf("")
    var usrTennisLevel by mutableStateOf("")
    var usrFootballLevel by mutableStateOf("")
    var usrBasketLevel by mutableStateOf("")
    var usrVolleyLevel by mutableStateOf("")
    var isEditedNickname by  mutableStateOf(false)
    var isEditedName by  mutableStateOf(false)
    var isEditedAge by  mutableStateOf(false)

    private fun getUserUID(): String{
        return fuser.uid
    }


    fun updateUser(callback: (Boolean) -> Unit) {
        val userRef = db.collection("users").document(getUserUID())

        val updateData = hashMapOf(
            "nickname" to usrNickname,
            "name" to usrName,
            "city" to usrCity,
            "age" to usrAge.toInt(),
            "gender" to usrGender,
            "id_user" to getUserUID(),
            "bio" to usrBio,
            "image" to usrImage,
            "sports" to usrSports,
            "tennis_level" to usrTennisLevel,
            "basket_level" to usrBasketLevel,
            "football_level" to usrFootballLevel,
            "volley_level" to usrVolleyLevel
        )

        userRef
            .update(updateData as Map<String, Any>)
            .addOnSuccessListener {
                Log.d("UpdateUser", "User data updated successfully.")
                callback(true)
            }
            .addOnFailureListener { e ->
                Log.e("UpdateUser", "Error updating user data.", e)
                callback(false)
            }
    }


    private val usersCollection = db.collection("users")

    fun checkUsername(callback: (Boolean) -> Unit) {
        usersCollection.get()
            .addOnSuccessListener { querySnapshot ->
                val nicknames = mutableListOf<String>()

                for (document in querySnapshot) {
                    val nickname = document.getString("nickname")
                    if (nickname != null) {
                        nicknames.add(nickname)
                    }
                }

                val nicknameExists = nicknames.contains(usrNickname)
                callback(nicknameExists)
            }
            .addOnFailureListener { e ->
                Log.e("UpdateUser", "Error updating user data.", e)
            }
    }

    companion object {
        val factory : ViewModelProvider.Factory = viewModelFactory {
            initializer {
                ProfileDetailsViewModel()
            }
        }
    }
}


@Composable
fun ProfileDetailsScreen(
    navController: NavHostController,
    vm: ProfileDetailsViewModel = viewModel(factory = ProfileDetailsViewModel.factory)
) {
    var questionIndex by remember { mutableStateOf(0) }
    val totalQuestionsCount = 3
    val scrollState = rememberScrollState()
    val context = LocalContext.current
    val permission = android.Manifest.permission.CAMERA

    var imageUri by remember {
        mutableStateOf<Uri?>(null)
    }

    //val bitmap1 = BitmapConverter.converterStringToBitmap(vm.usrImage)
    val bitmap = remember {
        mutableStateOf(BitmapConverter.converterStringToBitmap(vm.usrImage))
    }

    var isEditedImage by remember { mutableStateOf(false) }
    val galleryLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.GetContent()
    ) { uri: Uri? ->
        imageUri = uri
        isEditedImage = true
    }

    val cameraLauncher = rememberLauncherForActivityResult(ActivityResultContracts.TakePicturePreview()) {
        vm.usrImage=BitmapConverter.converterBitmapToString(it!!)
        bitmap.value = it
        isEditedImage = true
    }
    val openCameraDialog = remember { mutableStateOf(false)  }

    val launcher = rememberLauncherForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted ->
        if (isGranted) {
            openCameraDialog.value = true
        }
    }

    fun checkAndRequestCameraPermission(
        context: Context,
        permission: String,
        launcher: ManagedActivityResultLauncher<String, Boolean>
    ) {
        val permissionCheckResult = ContextCompat.checkSelfPermission(context, permission)
        if (permissionCheckResult == PackageManager.PERMISSION_GRANTED) {
            openCameraDialog.value = true
        } else {
            // Request a permission
            launcher.launch(permission)
        }
    }

    if (openCameraDialog.value) {

        AlertDialog(
            onDismissRequest = {
                openCameraDialog.value = false
            },
            text = {
                Text("Choose an option to update your profile image:")
            },
            confirmButton = {
                Button(
                    onClick = {
                        cameraLauncher.launch()
                        openCameraDialog.value = false
                    }) {
                    Text("Camera")
                }
            },
            dismissButton = {
                Button(
                    onClick = {
                        galleryLauncher.launch("image/*")
                        openCameraDialog.value = false
                    }) {
                    Text("Gallery")
                }
            }
        )
    }


    Column(
        modifier = Modifier
            .fillMaxSize()
    ) {
        Text(
            text = "Get started with Sport Camp!\nComplete your profile",
            modifier = Modifier
                .fillMaxWidth()
                .padding(20.dp),
            textAlign = TextAlign.Center,
            fontSize = 20.sp
        )

        SurveyTopAppProgress(questionIndex, totalQuestionsCount)

        Column(
            modifier = Modifier
                .padding(16.dp)
                .padding(top = 50.dp)
                .fillMaxSize()
                .verticalScroll(scrollState)
        ) {

            when (questionIndex) {
                0 -> {
                    // Question 1 content
                    Row{
                        Text("Personal info")
                    }
                    CustomTextField(
                        modifier = Modifier
                            .padding(all = 10.dp)
                            .fillMaxWidth(),
                        labelResId = R.string.Nickname,
                        inputWrapper = vm.usrNickname,
                        keyboardOptions = KeyboardOptions(
                            capitalization = KeyboardCapitalization.None,
                            autoCorrect = false,
                            keyboardType = KeyboardType.Text,
                            imeAction = ImeAction.Done
                        ),
                        maxLength = 50,
                        maxLines = 1,
                        onTextChanged = { newText ->
                            vm.usrNickname = newText
                            vm.isEditedNickname = true
                        }

                    )

                    CustomTextField(
                        modifier = Modifier
                            .padding(all = 10.dp)
                            .fillMaxWidth(),
                        labelResId = R.string.Name,
                        inputWrapper = vm.usrName,
                        keyboardOptions = KeyboardOptions(
                            capitalization = KeyboardCapitalization.None,
                            autoCorrect = false,
                            keyboardType = KeyboardType.Text,
                            imeAction = ImeAction.Done
                        ),
                        maxLength = 50,
                        maxLines = 1,
                        onTextChanged = { newText ->
                            vm.usrName = newText
                            vm.isEditedName = true
                        }
                    )

                    CustomTextField(
                        modifier = Modifier
                            .padding(all = 10.dp)
                            .fillMaxWidth(),
                        labelResId = R.string.Age,
                        inputWrapper = vm.usrAge,
                        keyboardOptions = KeyboardOptions(
                            capitalization = KeyboardCapitalization.None,
                            autoCorrect = false,
                            keyboardType = KeyboardType.Number,
                            imeAction = ImeAction.Done
                        ),
                        maxLength = 3,
                        maxLines = 1,
                        onTextChanged = { newText ->
                            vm.usrAge = newText
                            vm.isEditedAge = true
                        }
                    )
                    DropDownMenuNew(userOption = vm.usrGender, type = "Gender")
                    DropDownMenuNew(userOption = vm.usrCity, type = "City")

                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceEvenly
                    ) {
                        Button(
                            modifier = Modifier
                                .padding(top = 10.dp),
                            onClick = {},
                            enabled = false
                        ) {
                            Text("Previous")
                        }
                        Button(
                            modifier = Modifier
                                .padding(top = 10.dp),
                            onClick = {
                                vm.checkUsername { usernameExists ->
                                    if (usernameExists) {
                                        Toast.makeText(context, "Username already used", Toast.LENGTH_SHORT).show()
                                    } else {
                                        questionIndex++
                                    }
                                }
                            },
                            enabled = vm.usrAge.isNotBlank() &&
                                    vm.usrCity.isNotBlank() &&
                                    vm.usrGender.isNotBlank() &&
                                    vm.usrName.isNotBlank() &&
                                    vm.usrNickname.isNotBlank()
                        ) {
                            Text("Next")
                        }
                    }


                }

                1 -> {
                    Text("Choose your favourite sports and choose your level for each of them")
                    //DropDownMenuSports(vm.usrSports)
                    var isExpanded by remember { mutableStateOf(false) }
                    val suggestions = listOf("Basketball", "Football", "Tennis", "Volleyball")

                    val icon = if (isExpanded)
                        Icons.Filled.ArrowDropUp
                    else
                        Icons.Filled.ArrowDropDown

                    Box {
                        OutlinedTextField(
                            value = vm.usrSports,
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(all = 10.dp),
                            onValueChange = { vm.usrSports = it },
                            readOnly = true,
                            label = { Text("Sports") },
                            trailingIcon = {
                                Icon(
                                    icon, "contentDescription",
                                    Modifier.clickable { isExpanded = !isExpanded }
                                )
                            }
                        )

                        DropdownMenu(
                            expanded = isExpanded,
                            onDismissRequest = { isExpanded = false},
                            modifier = Modifier
                                .padding(all = 10.dp)
                                .fillMaxWidth(),
                        ) {
                            val selectedCheckboxes = remember { mutableStateListOf<String>() }

                            suggestions.forEach { labelRow ->
                                val isChecked = remember { mutableStateOf(false) }

                                DropdownMenuItem(onClick = {
                                    isChecked.value = !isChecked.value

                                    if (isChecked.value) {
                                        selectedCheckboxes.add(labelRow)
                                    } else {
                                        selectedCheckboxes.remove(labelRow)
                                    }

                                    vm.usrSports = selectedCheckboxes.joinToString(", ")
                                }) {
                                    Row(
                                        modifier = Modifier.padding(8.dp),
                                        verticalAlignment = Alignment.CenterVertically
                                    ) {
                                        Checkbox(
                                            checked = isChecked.value,
                                            onCheckedChange = null, // Leave this null to handle the click in DropdownMenuItem
                                            enabled = true,
                                            colors = CheckboxDefaults.colors(Color.Blue)
                                        )
                                        Text(text = labelRow)
                                    }
                                }
                            }
                        }
                    }

                    if(vm.usrSports.contains("Tennis"))
                        TriStateToggleEditNew(vm.usrTennisLevel,sport = "Tennis")
                    if(vm.usrSports.contains("Basketball"))
                        TriStateToggleEditNew(vm.usrBasketLevel,sport = "Basketball")
                    if(vm.usrSports.contains("Football"))
                        TriStateToggleEditNew(vm.usrFootballLevel,sport = "Football")
                    if(vm.usrSports.contains("Volleyball"))
                        TriStateToggleEditNew(vm.usrVolleyLevel,sport = "Volleyball")

                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceEvenly
                    ) {
                        Button(
                            modifier = Modifier
                                .padding(top = 10.dp),
                            onClick = { questionIndex-- },
                            enabled = true
                        ) {
                            Text("Previous")
                        }
                        Button(
                            modifier = Modifier
                                .padding(top = 10.dp),
                            onClick = {
                                questionIndex++
                            },
                            enabled = true
                        ) {
                            Text("Next")
                        }
                    }
                }
                2 -> {
                    Text("Show other users something about yourself!")
                    Spacer(modifier = Modifier.height(10.dp))
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(all = 8.dp),
                        contentAlignment = Alignment.Center
                    ) {
                        bitmap.value?.let { btm ->
                            Image(
                                bitmap = btm.asImageBitmap(),
                                contentScale = ContentScale.Crop,
                                contentDescription = null,
                                modifier = Modifier
                                    .size(200.dp)
                                    .clip(CircleShape)
                                    .border(
                                        2.dp,
                                        MaterialTheme.colors.secondary,
                                        CircleShape
                                    )
                            )
                        }
                        imageUri?.let {
                            if (Build.VERSION.SDK_INT < 28) {
                                vm.usrImage = BitmapConverter.converterBitmapToString(MediaStore.Images
                                    .Media.getBitmap(context.contentResolver, it))

                            } else {
                                val source = ImageDecoder
                                    .createSource(context.contentResolver, it)
                                vm.usrImage = BitmapConverter.converterBitmapToString(ImageDecoder.decodeBitmap(source))
                            }
                        }

                        IconButton(
                            onClick = { },
                            modifier = Modifier
                                .size(24.dp)
                                .align(Alignment.Center)
                                .graphicsLayer(
                                    translationX = 250f,
                                    translationY = 250f
                                )
                                .border(
                                    2.dp,
                                    MaterialTheme.colors.secondary,
                                    CircleShape
                                )
                                .background(
                                    color = MaterialTheme.colors.secondary,
                                    shape = CircleShape
                                ),
                        ) {
                            Icon(
                                imageVector = Icons.Filled.PhotoCamera,
                                contentDescription = "Camera",
                                modifier = Modifier.clickable {
                                    checkAndRequestCameraPermission(context, permission, launcher)
                                },
                                tint = MaterialTheme.colors.background
                            )
                        }

                        }
                    Spacer(modifier = Modifier.height(10.dp))
                    CustomTextField(
                        modifier = Modifier
                            .padding(all = 10.dp)
                            .fillMaxWidth(),
                        labelResId = R.string.Bio,
                        inputWrapper = vm.usrBio,
                        keyboardOptions = KeyboardOptions(
                            capitalization = KeyboardCapitalization.None,
                            autoCorrect = false,
                            keyboardType = KeyboardType.Text,
                            imeAction = ImeAction.Done
                        ),
                        maxLength = 100,
                        maxLines = 1,
                        onTextChanged = { newText ->
                            vm.usrBio = newText
                        }
                    )

                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceEvenly
                    ) {
                        Button(
                            modifier = Modifier
                                .padding(top = 10.dp),
                            onClick = { questionIndex-- },
                            enabled = true
                        ) {
                            Text("Previous")
                        }
                        Button(
                            modifier = Modifier
                                .padding(top = 10.dp),
                            onClick = {
                                vm.updateUser { updated ->
                                    if (updated) {
                                        navController.navigate(route = Screen.Reservations.route)
                                        Toast.makeText(context, "Welcome to Sport Camp, ${vm.usrName}!", Toast.LENGTH_SHORT).show()
                                    } else {
                                        Toast.makeText(context, "Error saving information, please try again", Toast.LENGTH_SHORT).show()
                                    }
                                }

                            },
                            enabled = true
                        ) {
                            Text("Save")
                        }
                    }
                }

                else -> {}
            }
        }


    }

}


@Composable
fun SurveyTopAppProgress(
    questionIndex: Int,
    totalQuestionsCount: Int
){
    val progress by animateFloatAsState(
        targetValue = (questionIndex+1)/totalQuestionsCount.toFloat()
    )
    LinearProgressIndicator(
        progress = progress,
        modifier = Modifier
            .fillMaxWidth()
            .padding(top = 30.dp)
    )
}

@Composable
fun TriStateToggleEditNew(
    userOption: String,
    sport: String,
    vm: ProfileDetailsViewModel = viewModel(factory = ProfileDetailsViewModel.factory)
) {

    val states = listOf(
        "Beginner",
        "Intermediate",
        "Advanced",
    )
    var selectedOption by remember {
        mutableStateOf(userOption)
    }
    val onSelectionChange = { text: String ->
        selectedOption = text
        if(sport == "Tennis") {
            vm.usrTennisLevel = selectedOption
        }
        if(sport == "Football") {
            vm.usrFootballLevel = selectedOption
        }
        if(sport == "Basketball") {
            vm.usrBasketLevel = selectedOption
        }
        if(sport == "Volleyball") {
            vm.usrVolleyLevel = selectedOption
        }
    }

    Column( modifier = Modifier
        .fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally) {
        Spacer(modifier = Modifier.height(5.dp))
        Text(
            text = "$sport level" ,
            fontSize = 16.sp,
        )
        Spacer(modifier = Modifier.height(5.dp))
    }


    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.Center
    ) {


        Surface(
            shape = RoundedCornerShape(24.dp),
            elevation = 4.dp,
            modifier = Modifier
                .wrapContentSize()
        ) {

            Row(
                modifier = Modifier
                    .clip(shape = RoundedCornerShape(24.dp))
                    .background(Color.LightGray)
            ) {
                states.forEach { text ->
                    Text(
                        text = text,
                        color = Color.White,
                        modifier = Modifier
                            .clip(shape = RoundedCornerShape(24.dp))
                            .clickable {
                                onSelectionChange(text)
                            }
                            .background(
                                if (text == selectedOption) {
                                    MaterialTheme.colors.primary
                                } else {
                                    Color.LightGray
                                }
                            )
                            .padding(
                                vertical = 12.dp,
                                horizontal = 10.dp,
                            ),
                    )
                }
            }
        }
    }
    Spacer(modifier = Modifier.height(5.dp))
}

@Composable
fun DropDownMenuNew(
    userOption: String,
    type: String,
    vm: ProfileDetailsViewModel = viewModel(factory = ProfileDetailsViewModel.factory)
) {

    var isExpanded by remember { mutableStateOf(false) }
    var userInitialValue by remember { mutableStateOf(userOption) } //male
    var suggestions = emptyList<String>()

    if (type == "Gender")
        suggestions = listOf("Male","Female","Other")
    if (type == "City")
        suggestions = listOf("Turin", "Milan", "Rome", "Venice", "Naples", "Padua","Genoa")

    val icon = if (isExpanded)
        Icons.Filled.ArrowDropUp //it requires androidx.compose.material:material-icons-extended
    else
        Icons.Filled.ArrowDropDown

    Box {

        OutlinedTextField(
            value = userInitialValue,
            modifier = Modifier
                .fillMaxWidth()
                .padding(all = 10.dp),
            onValueChange = { userInitialValue = it },
            readOnly = true,
            label = { Text(type) },
            trailingIcon = {
                Icon(icon, "contentDescription",
                    Modifier.clickable { isExpanded = !isExpanded })
            }
        )

        DropdownMenu(
            expanded = isExpanded,
            onDismissRequest = { isExpanded = false },
            modifier = Modifier
                .padding(all = 10.dp)
                .fillMaxWidth(),
        ) {
            suggestions.forEach { label ->
                DropdownMenuItem(onClick = {
                    userInitialValue = label
                    isExpanded = false
                    if(type == "Gender") {
                        vm.usrGender = label
                    }
                    if(type == "City") {
                        vm.usrCity = label
                    }
                }) {
                    Text(text = label)
                }
            }
        }
    }

}


